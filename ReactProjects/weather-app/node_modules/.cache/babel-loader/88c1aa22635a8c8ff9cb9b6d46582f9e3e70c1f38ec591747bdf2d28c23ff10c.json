{"ast":null,"code":"var _jsxFileName = \"/Users/appy/ReactProjects/weather-app/src/components/Weather.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchWeatherData } from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Weather = ({\n  cityName\n}) => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    if (!cityName) {\n      return;\n    }\n    const getWeatherData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetchWeatherData(cityName);\n        setWeather(response);\n      } catch (err) {\n        setErrorMessage(\"Failed to get weather data.\");\n        setWeather(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n  }, [cityName]);\n  /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Weather Data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"RERyHgumOcEj1xRCDiVr+DXBsJY=\");\n_c = Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","fetchWeatherData","jsxDEV","_jsxDEV","Weather","cityName","_s","weather","setWeather","loading","setLoading","error","setErrorMessage","getWeatherData","response","err","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/appy/ReactProjects/weather-app/src/components/Weather.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { WeatherData } from '../types/weather';\nimport { fetchWeatherData } from \"../api/api\";\n\nexport const Weather = ({cityName}: {cityName: string}) => {\n    const [weather, setWeather] = useState<WeatherData|null>(null);\n    const [loading ,setLoading] = useState(false);\n    const [error, setErrorMessage] = useState(\"\");\n  \n    useEffect(() =>{\n\n        if(!cityName){\n            return;\n        }\n        \n        const getWeatherData = async () => {\n            try{\n                setLoading(true);\n                const response = await fetchWeatherData(cityName);\n                setWeather(response);\n            }catch(err){\n                setErrorMessage(\"Failed to get weather data.\");\n                setWeather(null);\n            }finally{\n                setLoading(false);\n            }\n        };\n    }, [cityName]);\n\n    <h1>Weather Data</h1>\n}\n   "],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEhD,SAASC,gBAAgB,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,OAAO,MAAMC,OAAO,GAAGA,CAAC;EAACC;AAA4B,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAmB,IAAI,CAAC;EAC9D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE7CD,SAAS,CAAC,MAAK;IAEX,IAAG,CAACM,QAAQ,EAAC;MACT;IACJ;IAEA,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAG;QACCH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMI,QAAQ,GAAG,MAAMb,gBAAgB,CAACI,QAAQ,CAAC;QACjDG,UAAU,CAACM,QAAQ,CAAC;MACxB,CAAC,QAAMC,GAAG,EAAC;QACPH,eAAe,CAAC,6BAA6B,CAAC;QAC9CJ,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,SAAO;QACJE,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;EACL,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,aAAAF,OAAA;IAAAa,QAAA,EAAI;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACzB,CAAC;AAAAd,EAAA,CA1BYF,OAAO;AAAAiB,EAAA,GAAPjB,OAAO;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}